#+TITLE: My Emacs Configuration
#+AUTHOR: Konstantin D. Schneider
#+AUTO_TANGLE: t
#+PROPERTY: header-args :tangle init.el

* Table of Contents
  :PROPERTIES:
  :TOC:      :include all :depth 2
  :END:
  
:CONTENTS:
- [[#table-of-contents][Table of Contents]]
- [[#system-settings][System Settings]]
- [[#package-management][Package Management]]
  - [[#setup-package-archives][Setup Package Archives]]
  - [[#use-package][Use-Package]]
  - [[#update-packages][Update Packages]]
- [[#keyboard-bindings][Keyboard bindings]]
  - [[#leader-bindings-with-generalel][Leader Bindings with general.el]]
  - [[#global-keybindings][Global Keybindings]]
  - [[#mode-specific-keybindings][Mode specific Keybindings]]
  - [[#keybinding-panel][Keybinding Panel]]
  - [[#becoming-evil][Becoming Evil]]
  - [[#stateful-keymaps-with-hydra][Stateful Keymaps with Hydra]]
- [[#general-configuration][General Configuration]]
  - [[#user-interface][User Interface]]
  - [[#visuals][Visuals]]
  - [[#dashboard][Dashboard]]
  - [[#emojis][Emojis]]
  - [[#helpful][Helpful]]
  - [[#command-log-mode][Command log mode]]
  - [[#notifications][Notifications]]
- [[#editor-configuration][Editor Configuration]]
  - [[#tab-width][Tab Width]]
  - [[#commenting-lines][Commenting Lines]]
  - [[#origami-for-code-folding][Origami for Code Folding]]
  - [[#highlight-matching-braces][Highlight Matching Braces]]
  - [[#commenting-lines][Commenting Lines]]
  - [[#set-margins-for-modes][Set Margins for Modes]]
- [[#completionselection-system][Completion/Selection System]]
  - [[#ivy][Ivy]]
  - [[#counsel][Counsel]]
  - [[#company][Company]]
- [[#file-browsing][File Browsing]]
  - [[#dired][Dired]]
  - [[#open-files-externally][Open Files Externally]]
  - [[#treemacs][Treemacs]]
- [[#org-mode][Org Mode]]
  - [[#general-configuration][General Configuration]]
  - [[#bullets][Bullets]]
  - [[#block-templates][Block Templates]]
  - [[#fonts--faces][Fonts & Faces]]
  - [[#table-of-contents][Table of Contents]]
  - [[#org-roam][Org Roam]]
  - [[#agenda][Agenda]]
- [[#project-management][Project Management]]
  - [[#projectile][Projectile]]
  - [[#search-with-ripgrep][Search with ripgrep]]
  - [[#git][Git]]
- [[#ide][IDE]]
  - [[#lsp][LSP]]
  - [[#polymode][Polymode]]
  - [[#ess][ESS]]
- [[#apps][Apps]]
  - [[#social][Social]]
  - [[#web-browser][Web Browser]]
  - [[#e-mail][e-Mail]]
:END:



* System Settings
  
 - [ ] macOS & Linux variables 
  
* Package Management
** Setup Package Archives
   
#+begin_src emacs-lisp

  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ;; ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

#+end_src

** Use-Package

   TODO Add support for automated system binary installation.
   
#+begin_src emacs-lisp

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

** Update Packages

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    (auto-package-update-show-preview t)
    (auto-package-update-delete-old-versions t)
    :config
    (auto-package-update-at-time "09:00")
    (auto-package-update-maybe))

#+end_src

* Keyboard bindings
** Leader Bindings with general.el

The keybindings of my config are mostly set using the package general.el. This makes it easy to use a custom leader key (SPC).

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-create-definer kds/spc-leader
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (general-create-definer kds/ctrl-c-keys
      :prefix "C-c"))

#+end_src
   
** Global Keybindings
*** TODO File Browsing
**** Files
**** Projects
*** TODO Git
*** TODO Window Management
*** TODO Buffers
*** ESC Cancels all
    
#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

*** Super/Meta Key

#+begin_src emacs-lisp

  (defconst IS-MAC     (eq system-type 'darwin))
  (defconst IS-LINUX   (eq system-type 'gnu/linux))
  (defconst IS-WINDOWS (memq system-type '(cygwin windows-nt ms-dos)))
  (defconst IS-BSD     (or IS-MAC (eq system-type 'berkeley-unix)))

  (cond
   (IS-MAC
    (setq mac-command-modifier      'super
    ns-command-modifier       'super
    mac-option-modifier       'meta
    ns-option-modifier        'meta
    mac-right-option-modifier 'none
    ns-right-option-modifier  'none))
   (IS-WINDOWS
    (setq w32-lwindow-modifier 'super
    w32-rwindow-modifier 'super)))

#+end_src

*** UI Toggles

#+begin_src emacs-lisp

  (kds/spc-leader
    "t" '(:ignore t :which-key "toggles")
    "tw" '(whitespace-mode :which-key "whitespace")
    "tt" '(counsel-load-theme :which-key "choose theme")
    "te" '(global-emojify-mode :which-key "emojis"))

#+end_src

*** TRAMP

#+begin_src emacs-lisp

  (setq tramp-default-method "ssh")

#+end_src

** TODO Mode specific Keybindings
*** TODO Code
*** TODO Org
** Keybinding Panel
  
#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

#+end_src

** Becoming Evil
*** Evil Mode

#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-tree)

    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (defun kds/dont-arrow-me-bro ()
      (interactive)
      (message "Arrows are bad, ma dude.."))

    ;; Disable arrow keys in normal and visual modes
    (define-key evil-normal-state-map (kbd "<left>") 'kds/dont-arrow-me-bro)
    (define-key evil-normal-state-map (kbd "<right>") 'kds/dont-arrow-me-bro)
    (define-key evil-normal-state-map (kbd "<down>") 'kds/dont-arrow-me-bro)
    (define-key evil-normal-state-map (kbd "<up>") 'kds/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<left>") 'kds/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<right>") 'kds/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<down>") 'kds/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<up>") 'kds/dont-arrow-me-bro)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

#+end_src

*** Evil Collection
    
#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

*** Undo Tree

#+begin_src emacs-lisp

  (use-package undo-tree
    :config (global-undo-tree-mode))

#+end_src

*** Rebind C-u

   Since I let evil-mode take over C-u for buffer scrolling, I need to re-bind the universal-argument command to another key sequence. I’m choosing C-M-u for this purpose.

#+begin_src emacs-lisp

  (global-set-key (kbd "C-M-u") 'universal-argument)

#+end_src

** Stateful Keymaps with Hydra
  
#+begin_src emacs-lisp

  (use-package hydra)

#+end_src

* General Configuration
** User Interface
*** More Minimalism

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (tooltip-mode 0)

  (set-fringe-mode 10)
  (set-frame-parameter nil 'internal-border-width 10)

  (menu-bar-mode -1)

  (setq visible-bell t)

#+end_src

*** Better Scrolling

#+begin_src emacs-lisp

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))  ; one line at a time
  (setq mouse-wheel-progressive-speed nil)             ; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't)                   ; scroll window under mouse
  (setq scroll-step 1) ; keyboard scroll one line at a time
  (setq use-dialog-box nil) ; Disable dialog boxes since they weren't working in Mac OSX

#+end_src

*** Frame Defaults

#+begin_src emacs-lisp

  (set-frame-parameter (selected-frame) 'alpha '(85 . 85))
  (add-to-list 'default-frame-alist '(alpha . (85 . 85)))
   ;;(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
   ;;(add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

** Visuals
*** Font

#+begin_src emacs-lisp

  (set-face-attribute 'default nil
		      :font "FiraCode Nerd Font Mono"
		      :weight 'light
		      :height 200)

  (set-face-attribute 'fixed-pitch nil
		      :font "FiraCode Nerd Font Mono"
		      :weight 'light
		      :height 200)

  (set-face-attribute 'variable-pitch nil
		      :font "FiraCode Nerd Font"
		      :weight 'light
		      :height 200)

#+end_src
 
*** Theme
**** Doom Themes
  
#+begin_src emacs-lisp

  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (doom-themes-visual-bell-config)
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    (doom-themes-org-config))

#+end_src

**** Zenburn

#+begin_src emacs-lisp

  (use-package zenburn-theme)

#+end_src

**** Load Theme
     
#+begin_src emacs-lisp

  (load-theme 'doom-dracula t)

#+end_src
 
*** Modeline
   
#+begin_src emacs-lisp

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 18)
    (setq doom-modeline-bar-width 4)
    (setq doom-modeline-hud nil)
    (setq doom-modeline-window-width-limit fill-column)
    (setq doom-modeline-project-detection 'projectile)
    (setq doom-modeline-buffer-file-name-style 'name)
    (setq doom-modeline-major-mode-icon t)
    (setq doom-modeline-major-mode-color-icon t)
    (setq doom-modeline-buffer-state-icon t)
    (setq doom-modeline-buffer-modification-icon t)
    (setq doom-modeline-minor-modes nil)
    (setq doom-modeline-enable-word-count t)
    (setq doom-modeline-continuous-word-count-modes '(text-mode markdown-mode org-mode))
    (setq doom-modeline-lsp t))

#+end_src

*** Icons
  
#+begin_src emacs-lisp

  (use-package all-the-icons)

#+end_src
  
** Dashboard

#+begin_src emacs-lisp

  (use-package dashboard
    :init
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title nil)
    (setq dashboard-project-backend 'projectile)
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents . 5)
                            (agenda . 5)
                            (bookmarks . 3)
                            (projects . 3)))
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-set-navigator t)
    :config
    (dashboard-setup-startup-hook))

#+end_src
   
** Emojis

#+begin_src emacs-lisp

  (use-package emojify
    :hook erc-mode)

#+end_src

** Helpful
  
#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Command log mode
  
#+begin_src emacs-lisp

  (use-package command-log-mode)

#+end_src

** Notifications
*** System Notifications

#+begin_src emacs-lisp

  (use-package alert
    :custom alert-default-style 'notifications)

#+end_src

*** Emacs Warnings

#+begin_src emacs-lisp

  (setq large-file-warning-threshold nil)
  ;;(setq vc-follow-symlinks t)
  (setq ad-redefinition-action 'accept)

#+end_src
    
** Auto-Save Changed Files

#+begin_src emacs-lisp

  (setq auto-save-default nil)

  (use-package super-save
    :config
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t))

#+end_src

* Editor Configuration
** Word Wrap

#+begin_src emacs-lisp

  (visual-line-mode 1)

#+end_src

** Tab Width
   
#+begin_src emacs-lisp

  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)

#+end_src

#+begin_src emacs-lisp

	(setq-default indent-tabs-mode nil)

#+end_src

** Commenting Lines

   WORK IN PROGRESS
   
** Origami for Code Folding

#+begin_src emacs-lisp

	(use-package origami
		:hook yaml-mode)

#+end_src

** Highlight Matching Braces

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Commenting Lines

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter)

#+end_src
  
** Set Margins for Modes

#+begin_src emacs-lisp

      (defun kds/org-mode-visual-fill ()
        (interactive)
        (setq visual-fill-column-width 100
              visual-fill-column-center-text t)
        (visual-fill-column-mode 1))

      (use-package visual-fill-column
        :hook (org-mode . kds/org-mode-visual-fill))

#+end_src

** Line numbers
*** Show Column Number in Modeline
    
#+begin_src emacs-lisp

  (column-number-mode 1)

#+end_src

*** Enable Linenumbers for specific modes

#+begin_src emacs-lisp

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
		  prog-mode-hook
		  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Override some modes which derive from the above
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

* Completion/Selection System
** Ivy
  
#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :config
    (ivy-mode 1))

#+end_src

#+begin_src emacs-lisp

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

#+end_src

** Counsel
  
#+begin_src emacs-lisp

  (use-package counsel
    :bind
    (("M-x" . counsel-M-x)
     ("C-x C-b" . counsel-switch-buffer)
     ("C-x C-f" . counsel-find-file)))

#+end_src

** Company

#+begin_src emacs-lisp

  (use-package company)

#+end_src

* File Browsing
** TODO Dired

#+begin_src emacs-lisp

  (use-package all-the-icons-dired)
  (use-package dired-single)
  (use-package dired-ranger)
  (use-package dired-collapse)

  (setq dired-listing-switches "-agho --group-directories-first"
	dired-omit-files "^\\.[^.].*"
	dired-omit-verbose nil
	dired-hide-details-hide-symlink-targets nil
	delete-by-moving-to-trash t)

  (autoload 'dired-omit-mode "dired-x")

  (add-hook 'dired-load-hook
	    (lambda ()
	      (interactive)
	      (dired-collapse)))

  (add-hook 'dired-mode-hook
	    (lambda ()
	      (interactive)
	      (dired-omit-mode 1)
	      (dired-hide-details-mode 1)
	      (all-the-icons-dired-mode 1))
	      (hl-line-mode 1))

  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "H" 'dired-omit-mode
    "l" 'dired-single-buffer
    "y" 'dired-ranger-copy
    "X" 'dired-ranger-move
    "p" 'dired-ranger-paste)

#+end_src

** TODO Open Files Externally
   
** Treemacs

#+begin_src emacs-lisp

  (use-package treemacs)

#+end_src
  
* Org Mode
** General Configuration
   
#+begin_src emacs-lisp

  ;; This is ugly af and keeps breaking.
  ;; TODO: Try to org-modules on their own.
  (defun kds/org-mode-setup ()
    (interactive)
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-mode 1))
  ;; (diminish org-indent-mode))           


  (use-package org
    :hook (kds/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-agenda-files '("~/Cloud/org/agenda"))
    (setq org-hide-emphasis-markers t)
    (setq org-src-fontify-natively t)
    (setq org-fontify-quote-and-verse-blocks t)
    (setq org-src-tab-acts-natively t)
    (setq org-hide-block-startup nil)
    (setq org-src-preserve-indentation nil)
    (setq org-startup-folded t)
    (setq org-cycle-separator-lines 2)
    (setq org-capture-bookmark nil)

    ;; Org Modules
    (setq org-modules '(org-crypt
                        org-habit
                        org-bookmark
                        org-eshell
                        org-irc
                        org-indent
                        org-tempo))

    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-use-outline-path t)

    (evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)

    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)

    ;; Structure Templates
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("r" . "src r"))

    ;; Fonts and Faces
    (set-face-attribute 'org-document-title nil
                        :font "FiraCode Nerd Font"
                        :weight 'bold
                        :height 1.3)

    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil
                          :font "FiraCode Nerd Font"
                          :weight 'medium
                          :height (cdr face)))

    ;; ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    ;; (set-face-attribute 'org-block nil
    ;;                     :foreground nil
    ;;                     :inherit 'fixed-pitch)
    ;; (set-face-attribute 'org-table nil
    ;;                     :inherit 'fixed-pitch)
    ;; (set-face-attribute 'org-formula nil
    ;;                     :inherit 'fixed-pitch)
    ;; (set-face-attribute 'org-code nil
    ;;                     :inherit '(shadow fixed-pitch))
    ;; ;;(set-face-attribute 'org-indent nil
    ;; ;;                    :inherit '(org-hide fixed-pitch))
    ;; (set-face-attribute 'org-verbatim nil
    ;;                     :inherit '(shadow fixed-pitch))
    ;; (set-face-attribute 'org-special-keyword nil
    ;;                     :inherit '(font-lock-comment-face fixed-pitch))
    ;; (set-face-attribute 'org-meta-line nil
    ;;                     :inherit '(font-lock-comment-face fixed-pitch))
    ;; (set-face-attribute 'org-checkbox nil
    ;;                     :inherit 'fixed-pitch)

    ;; ;; Get rid of the background on column views
    ;; (set-face-attribute 'org-column nil
    ;;                     :background nil)
    ;; (set-face-attribute 'org-column-title nil
    ;;                     :background nil))
    )

#+end_src

** Bullets

#+begin_src emacs-lisp

  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-leading-bullet ?\s
          org-superstar-leading-fallback ?\s
          org-hide-leading-stars nil
          org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Create ToC automatically 

#+begin_src emacs-lisp

  (use-package org-make-toc
    :after org)

#+end_src

** Org Roam
   
#+begin_src emacs-lisp

  (use-package org-roam
    :after org
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Cloud/org")
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-setup))

#+end_src

** Auto-Tangle on Save

#+begin_src emacs-lisp

  (use-package org-auto-tangle
    :hook (org-mode . org-auto-tangle-mode))

#+end_src

* Project Management
** Projectile
  
#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (setq projectile-project-search-path '("~/"))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

#+begin_src emacs-lisp
  
  (kds/spc-leader
  "p" '(projectile-command-map :which-key "projectile"))
  
  (kds/spc-leader
  "b" '(:ignore t :which-key "buffer")
  "bb" '(counsel-switch-buffer :which-key "switch buffer"))
  
  (kds/spc-leader
  "w" '(:ignore t :which-key "window")
  "ww" '(evil-window-next :which-key "next window")
  "wc" '(evil-window-close :which-key "close window"))
  
#+end_src

** Search with ripgrep

#+begin_src emacs-lisp

  (use-package rg)
  
#+end_src

** Git
*** Magit
   
#+begin_src emacs-lisp

  (use-package magit)

#+end_src

*** Forge
   
#+begin_src emacs-lisp

  (use-package forge
    :after magit
    :disabled)

#+end_src

* IDE 
** LSP

#+begin_src emacs-lisp

  (use-package lsp-mode)

#+end_src
 
** Polymode

#+begin_src emacs-lisp

    (use-package polymode)
    (use-package poly-markdown)
    (use-package poly-R)

    (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-R-mode))

#+end_src

** Languages
*** R

#+begin_src emacs-lisp

  (use-package ess)

#+end_src


 #+end_src

** ESS

#+begin_src emacs-lisp

  (use-package ess)

#+end_src

* Apps
** Web Browser

#+begin_src emacs-lisp

  (use-package eww)

#+end_src
